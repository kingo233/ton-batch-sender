#include "imports/stdlib.fc";
#include "message.fc";
#include "op.fc";
#include "error.fc";
#include "gas.fc";
#include "storage.fc";

int calculate_cost(int len, int fee_type) inline {
  if(len <= storage::max_free_user_count){
    return 0;
  }

  if(fee_type == 0){
    return storage::one_time_fee;
  } else {
    return storage::per_user_fee * len;
  }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();

  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }

  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_value = cs~load_coins(); ;; Fees for forwarding messages assigned by validators
  int fwd_fee = muldiv(fwd_value, 3, 2); ;; use message fwd_fee for estimation of forward_payload costs

  int op = in_msg_body~load_uint(32);
  in_msg_body~load_uint(64); ;; skip query_id

  load_storage();

  ;; admin function
  if(equal_slices(sender_address, storage::admin_address)){
    if(op == op::set_one_time_fee) {
      int fee = in_msg_body~load_coins();
      storage::one_time_fee = fee;
      save_storage();

      return ();
    }

    if(op == op::set_per_user_fee) {
      int fee = in_msg_body~load_coins();
      storage::per_user_fee = fee;
      save_storage();

      return ();
    }

    if(op == op::set_fee_receiver_address) {
      slice addr = in_msg_body~load_msg_addr();
      storage::fee_receiver_address = addr;
      save_storage();

      return ();
    }
  }

  if (op == op::transfer_notification) {
    (int jetton_amount, slice from) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
    cell forward_payload = in_msg_body~load_ref();
    slice forward_payload_slice = forward_payload.begin_parse();

    throw_unless(error::invalid_amount, jetton_amount > 0);
    int transferred_op = forward_payload_slice~load_uint(32);
    int query_id = forward_payload_slice~load_uint(64);

    if (transferred_op == op::send) {
      cell messages = forward_payload_slice~load_dict();
      int fee_type = forward_payload_slice~load_uint(32);
      int size = 0;
      int total_amount = 0;

      (int key, slice message, int flag) = messages.udict_get_min?(64);
      while (flag) {
        (slice to, int amount) = (message~load_msg_addr(), message~load_coins());
        size += 1;
        total_amount += amount;

        (key, message, flag) = messages.udict_get_next?(64, key);
      }

      ;; Note
      ;; Jetton Transfer Minimum Fee = 0.04TON
      ;; 0.04 = 0.015 * 2 + 0.01
      ;; * 0.015 is jetton transfer gas_consumption
      ;; * 0.01 is jetton wallet minimum storage fee
      ;; TODO : Hardcoded gas calculation is not good. It should be calculated by gas.fc
      int gas_required_per_transfer = 50000000; ;; 0.05TON
      int minmum_fee = 13000000; ;; 0.013TON Estimated
      int gas_required = gas_required_per_transfer * size;
      int cost = calculate_cost(size, fee_type);

      ;; Refund Case
      if((msg_value < gas_required + cost + minmum_fee) | (jetton_amount < total_amount) | (size == 0)){
        var body = create_simple_transfer_body(query_id, 0, jetton_amount, from, from);
        send_simple_message(0, sender_address, body.end_cell(), CARRY_REMAINING_GAS);

        return ();
      }

      (key, message, flag) = messages.udict_get_min?(64);
      while (flag) {
        (slice to, int amount) = (message~load_msg_addr(), message~load_coins());

        var body = create_simple_transfer_body(query_id, 0, amount, to, from);
        ;; Ignore sender_address condition. It's not necessary to check it.
        ;; Why? If sender_address is not batch_sender's jetton wallet address, nothing will happen.
        send_simple_message(gas_required_per_transfer, sender_address, body.end_cell(), IGNORE_ERRORS);

        (key, message, flag) = messages.udict_get_next?(64, key);
      }

      if(cost > 0) {
        send_raw_message(begin_cell()
          .store_uint(0x10, 6)
          .store_slice(storage::fee_receiver_address)
          .store_coins(cost)
          .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
          .end_cell(), IGNORE_ERRORS);
      }

      if(msg_value > gas_required + cost + minmum_fee) {
        send_raw_message(begin_cell()
        .store_uint(0x10, 6)
        .store_slice(from)
        .store_coins(msg_value - gas_required - cost - minmum_fee)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell(), IGNORE_ERRORS);
      }
    }
  }

  return ();
}

int get_cost(int len, int fee_type) method_id {
  load_storage();

  return calculate_cost(len, fee_type);
}

(int, int, int, slice, slice) get_storage() method_id {
  load_storage();

  return (
    storage::one_time_fee,
    storage::per_user_fee,
    storage::max_free_user_count,
    storage::admin_address,
    storage::fee_receiver_address
  );
}